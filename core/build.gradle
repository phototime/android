plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'com.google.protobuf'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 26
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField("String", "WEATHER_API_KEY", WEATHER_API_KEY)
        buildConfigField("String", "WEATHER_API_URL", WEATHER_API_URL)
        buildConfigField("String", "ALGOLIA_API_URL", ALGOLIA_API_URL)
        buildConfigField("String", "TIME_API_URL", TIME_API_URL)
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.18.0"
    }

    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0:osx-x86_64" }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.43.0'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {

    implementation(libs.bundles.android)
    implementation(libs.solarized)
    implementation(libs.koin.android)
    implementation(libs.bundles.network)
    implementation(libs.arrow)
    implementation(libs.playServices.location)
    implementation(libs.protobuf.lite)
    implementation(libs.sentry)
    implementation(libs.slf4j)
    implementation(libs.logger)
    implementation(libs.datastore)

    testImplementation(libs.junit.core)
    testImplementation(libs.okhttp.mock)
    testImplementation(libs.coroutines.test)
    testImplementation(libs.bundles.koinTest)

    implementation project(path: ':shared')
    implementation project(path: ':domain')
}